generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model QName {
  id    Int     @id @default(autoincrement())
  val   String
  nodes QNode[]
  edges QEdge[]
}

model QSize {
  id    Int     @id @default(autoincrement())
  val   Int     @default(0)
  min   Int?
  max   Int?
  nodes QNode[]
  edges QEdge[]
}

model QNode {
  id     Int     @id @default(autoincrement())
  name   QName  @relation(fields: [nameId], references: [id])
  nameId Int
  size   QSize   @relation(fields: [sizeId], references: [id])
  sizeId Int
  ins    QEdge[] @relation("out")
  outs   QEdge[] @relation("in")
  asPack QPack?  @relation("asPack")
  packs  QPack[]
  asPort QPort?  @relation("asPort")
}

model QEdge {
  id     Int    @id @default(autoincrement())
  name   QName? @relation(fields: [nameId], references: [id])
  nameId Int?
  size   QSize  @relation(fields: [sizeId], references: [id])
  sizeId Int
  in     QNode  @relation("in", fields: [inId], references: [id])
  inId   Int
  out    QNode  @relation("out", fields: [outId], references: [id])
  outId  Int
}

model QPack {
  id     Int     @id
  asNode QNode   @relation("asPack", fields: [id], references: [id])
  nodes  QNode[]
  ports  QPort[]
}

model QPort {
  id     Int   @id
  asNode QNode @relation("asPort", fields: [id], references: [id])
  pack   QPack @relation(fields: [packId], references: [id])
  packId Int   @unique
}
